name: Alerts & Brief (Mars/Venus)

on:
  schedule:
    - cron: "6 * * * *"    # stündlich Minute 06 (UTC)
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: alerts-${{ github.ref }}
  cancel-in-progress: false

jobs:
  alerts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      # ---- DST-Gate (07/12/17 Berlin) ----
      - name: Time gate (Europe/Berlin → 07/12/17 only)
        id: timegate
        run: |
          TZ=Europe/Berlin
          HOUR=$(TZ=$TZ date +%H)
          if [ "$HOUR" = "07" ] || [ "$HOUR" = "12" ] || [ "$HOUR" = "17" ]; then
            echo "continue=true" >> $GITHUB_OUTPUT
          else
            echo "continue=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop if not scheduled Berlin hour
        if: steps.timegate.outputs.continue == 'false'
        run: echo "Skipping alerts brief (not 07/12/17 Berlin)." && exit 0

      # ---- Engine laufen lassen ----
      - name: Run Alert Engine
        run: |
          mkdir -p docs
          python tools/run_alerts.py
          if [ ! -f docs/alerts.json ]; then
            echo "❌ docs/alerts.json fehlt – Engine hat nichts erzeugt"
            exit 2
          fi
          echo "===== docs/alerts.json (erste 40) ====="
          head -n 40 docs/alerts.json || true

      # ---- Brief rendern (Renderer oder Fallback-HereDoc) ----
      - name: Render Markdown Brief
        shell: bash
        run: |
          mkdir -p docs
          if [ -f tools/render_alerts_md.py ]; then
            python tools/render_alerts_md.py
          else
            # Fallback: Python-HereDoc
            cat > /tmp/render_alerts.py <<'PY'
import json, pathlib, datetime

p = pathlib.Path("docs/alerts.json")
data = {}
try:
    data = json.loads(p.read_text(encoding="utf-8"))
except Exception:
    data = {}

ts = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
lines = [f"# Alerts Brief — {ts}", ""]

for sec in ("mars", "venus", "family"):
    lines.append(f"## {sec}")
    alerts = (data.get(sec) or {}).get("alerts", [])
    if not alerts:
        lines.append("_(keine Alerts)_\n")
        continue
    for a in alerts[:10]:
        topic = a.get("ticker") or a.get("topic") or "?"
        sc = a.get("score", "?")
        cf = a.get("confidence", "?")
        what = (a.get("what") or "").strip()
        lines.append(f"- **{topic}** — Score {sc} | Confidence {cf}\n  {what}")
    lines.append("")

pathlib.Path("docs/alerts_brief.md").write_text("\n".join(lines), encoding="utf-8")
PY
            python /tmp/render_alerts.py
          fi

      - name: Preview docs/alerts_brief.md
        run: |
          echo "===== docs/alerts_brief.md (erste 80) ====="
          head -n 80 docs/alerts_brief.md || true

      # ---- Commit & Push Brief ----
      - name: Commit & Push Brief
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/alerts_brief.md || true
          if git diff --cached --quiet; then
            echo "Keine Änderungen zu committen."
          else
            git commit -m "CI(alerts): update alerts_brief.md ($(date -u +'%Y-%m-%dT%H:%MZ'))"
            git push origin HEAD:main --force
          fi

      # ---- Telegram nur bei Alerts ----
      - name: Telegram Notify (nur wenn Alerts vorhanden)
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' && secrets.TELEGRAM_CHAT_ID != '' }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
          RUN_URL:  ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          python - <<'PY'
import json, pathlib
p = pathlib.Path("docs/alerts.json")
has = False
try:
    d = json.loads(p.read_text(encoding="utf-8"))
    for k in ("mars","venus","family"):
        if isinstance(d.get(k), dict) and d[k].get("alerts"):
            if len(d[k]["alerts"]) > 0:
                has = True
                break
except Exception:
    pass
open("/tmp/has.flag","w").write("1" if has else "0")
PY
          if [ "$(cat /tmp/has.flag)" != "1" ]; then
            echo "❕ Keine Alerts vorhanden – Telegram wird übersprungen."
            exit 0
          fi
          {
            echo "🚨 Alerts-Run (Mars/Venus) – Details:"
            echo "${RUN_URL}"
            echo ""
            echo "--- Erste Zeilen aus docs/alerts.json ---"
            head -n 10 docs/alerts.json || echo "{}"
          } > /tmp/tg_msg.txt
          curl -sS "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d "chat_id=${TG_CHAT}" \
            --data-urlencode text@/tmp/tg_msg.txt \
            >/dev/null || true
