name: Alerts & Brief MarsVenus

on:
  schedule:
    - cron: "6 * * * *"   # stündlich Minute 06 UTC
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: alerts-${{ github.ref }}
  cancel-in-progress: false

jobs:
  alerts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Check alerts.json presence
        run: |
          if [ ! -s docs/alerts.json ]; then
            echo "ℹ️  docs/alerts.json fehlt oder ist leer – MAIN hat (noch) nicht produziert."
            echo "     -> ALERTS rendert/benachrichtigt heute nicht."
            exit 0
          fi
          echo "===== docs/alerts.json (erste 40 Zeilen) ====="
          head -n 40 docs/alerts.json || true

      - name: Render Markdown brief
        run: |
          mkdir -p docs
          if [ -f tools/render_alerts_md.py ]; then
            python tools/render_alerts_md.py
          else
            # schlanker Fallback
            echo "# Alerts Brief — $(date -u +"%Y-%m-%d %H:%M UTC")" > docs/alerts_brief.md
            echo "_(renderer missing – minimal fallback)_" >> docs/alerts_brief.md
          fi
          echo "===== docs/alerts_brief.md (erste 60 Zeilen) ====="
          head -n 60 docs/alerts_brief.md || true

      - name: Commit & push brief (idempotent)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/alerts_brief.md || true
          if git diff --cached --quiet; then
            echo "Keine Änderungen – kein Commit."
          else
            git commit -m "CI(alerts): update brief ($(date -u +'%Y-%m-%dT%H:%MZ'))"
            git push origin HEAD:main --force
          fi

      - name: Telegram (only if alerts exist)
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
          RUN_URL:  ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          if [ -z "${TG_TOKEN}" ] || [ -z "${TG_CHAT}" ]; then
            echo "Tele­gram secrets fehlen – überspringe."
            exit 0
          fi
          python - <<'PY'
import json, pathlib, os, sys
p = pathlib.Path("docs/alerts.json")
try:
    d = json.loads(p.read_text(encoding="utf-8"))
except Exception:
    sys.exit(0)
# prüfen ob alerts existieren
has = any(isinstance(d.get(k), dict) and d[k].get("alerts") for k in ("mars","venus","family"))
if not has:
    sys.exit(0)
msg = ["🚨 Alerts-Run (Mars/Venus)", os.environ.get("RUN_URL",""), "", "--- Erste Zeilen aus alerts.json ---"]
try:
    msg.extend(p.read_text(encoding="utf-8").splitlines()[:10])
except Exception:
    msg.append("{}")
pathlib.Path("/tmp/tg_msg.txt").write_text("\n".join(msg), encoding="utf-8")
print("[OK] wrote /tmp/tg_msg.txt")
PY
          if [ -f /tmp/tg_msg.txt ]; then
            curl -sS "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d "chat_id=${TG_CHAT}" \
              --data-urlencode text@/tmp/tg_msg.txt >/dev/null || true
          else
            echo "Keine Alerts – kein Telegram."
          fi
