name: Alerts & Brief (mars/venus)

on:
  schedule:
    - cron: "6 * * * *"    # stündlich Minute 06 (UTC)
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: alerts-${{ github.ref }}
  cancel-in-progress: false

jobs:
  alerts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      # ---- DST-Gate (nur 07/12/17 Europe/Berlin) ----
      - name: Time gate (Europe/Berlin → 07/12/17 only)
        id: timegate
        run: |
          TZ=Europe/Berlin
          HOUR=$(TZ=$TZ date +%H)
          if [ "$HOUR" = "07" ] || [ "$HOUR" = "12" ] || [ "$HOUR" = "17" ]; then
            echo "continue=true" >> $GITHUB_OUTPUT
          else
            echo "continue=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop if not scheduled Berlin hour
        if: steps.timegate.outputs.continue == 'false'
        run: echo "Skipping alerts brief (not 07/12/17 Berlin)." && exit 0

      # ---- Live-Kurse ziehen (Snapshot) ----
      - name: Pull live prices (EUR snapshot)
        run: |
          python tools/live_data.py
          echo "===== prices_eur_snapshot.csv (Top 10) ====="
          sed -n '1,10p' data/prices_eur_snapshot.csv || true

      # ---- Engine laufen lassen (schreibt alerts.json/out.json) ----
      - name: Run Alert Engine
        run: |
          python tools/run_alerts.py
          echo "===== docs/alerts.json (erste 40) ====="
          sed -n '1,40p' docs/alerts.json || true

      # ---- Brief rendern ----
      - name: Render Markdown Brief
        run: |
          mkdir -p docs
          python tools/render_alerts_md.py

      - name: Preview docs/alerts_brief.md
        run: |
          echo "===== docs/alerts_brief.md (erste 80) ====="
          head -n 80 docs/alerts_brief.md || true

      # ---- Commit & Push Brief + JSON ----
      - name: Commit & Push Brief + JSON
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/alerts.json docs/alerts_brief.md || true
          if git diff --cached --quiet; then
            echo "Keine Änderungen zu committen."
          else
            git commit -m "CI(alerts): update alerts + brief ($(date -u +'%Y-%m-%dT%H:%MZ'))"
            git push origin HEAD:main --force
          fi

      # ---- Telegram Notify (nur wenn Alerts vorhanden) ----
      - name: Telegram Notify
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' && secrets.TELEGRAM_CHAT_ID != '' }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
          RUN_URL:  ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          python tools/check_alerts_and_build_tg.py --run-url "$RUN_URL"
          if [ -f /tmp/tg_msg.txt ]; then
            curl -sS "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d "chat_id=${TG_CHAT}" \
              --data-urlencode text@/tmp/tg_msg.txt >/dev/null || true
          else
            echo "❕ Keine Alerts – Telegram übersprungen."
          fi
