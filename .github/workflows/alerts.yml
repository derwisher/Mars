name: Alerts & Brief (mars/venus)

on:
  schedule:
    - cron: "6 * * * *"      # stündlich Minute 06 (UTC)
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: alerts-${{ github.ref }}
  cancel-in-progress: false

jobs:
  alerts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      # ---- Diagnose: Umgebung und Dateien sichtbar machen ----
      - name: Diagnostics (workspace & versions)
        shell: bash
        run: |
          set -euxo pipefail
          echo "Workspace: $GITHUB_WORKSPACE"
          python --version
          pip list || true
          echo "---- root ----"; ls -la
          echo "---- tools ----"; ls -la tools || true
          echo "---- data ----"; ls -la data || true

      # ---- Optional: EUR-Snapshot ziehen (nur wenn live_data.py vorhanden) ----
      - name: (Optional) Pull live prices (EUR snapshot)
        if: ${{ hashFiles('tools/live_data.py') != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          python tools/live_data.py || true
          echo "---- prices_eur_snapshot.csv (Top 10) ----"
          sed -n '1,10p' data/prices_eur_snapshot.csv || true

      # ---- Engine ausführen, Output prüfen, JSON anreißen ----
      - name: Run Alert Engine (verbose)
        shell: bash
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          set -euxo pipefail
          mkdir -p docs
          python tools/run_alerts.py
          if [ ! -s docs/alerts.json ]; then
            echo "❌ docs/alerts.json fehlt oder ist leer – Engine hat nichts geliefert."
            exit 2
          fi
          echo "✅ docs/alerts.json vorhanden. Erste 80 Zeilen:"
          sed -n '1,80p' docs/alerts.json || true

      # ---- Brief rendern (externe Datei, kein Here-Doc) ----
      - name: Render Markdown Brief
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p docs
          # Falls du einen festen Renderer hast, kannst du diese Zeile verwenden:
          if [ -f tools/render_alerts_md.py ]; then
            python tools/render_alerts_md.py
          else
            # Fallback: Temporäres Renderer-Skript erzeugen
            cat > /tmp/render_alerts_md.py << 'PY'
import json, pathlib, datetime
p = pathlib.Path("docs/alerts.json")
data = {}
try:
    data = json.loads(p.read_text(encoding="utf-8"))
except Exception:
    data = {}
ts = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
lines = [f"# Alerts Brief — {ts}", ""]
for sec in ("mars","venus","family"):
    lines.append(f"## {sec}")
    alerts = (data.get(sec) or {}).get("alerts", [])
    if not alerts:
        lines.append("_(keine Alerts)_\n")
        continue
    for a in alerts[:10]:
        topic = a.get("ticker") or a.get("topic") or "?"
        sc = a.get("score","?")
        cf = a.get("confidence","?")
        what = (a.get("what") or "").strip()
        lines.append(f"- **{topic}** — Score {sc} | Confidence {cf}\n  {what}")
    lines.append("")
pathlib.Path("docs/alerts_brief.md").write_text("\n".join(lines), encoding="utf-8")
PY
            python /tmp/render_alerts_md.py
          fi
          # Verifizieren
          if [ ! -s docs/alerts_brief.md ]; then
            echo "❌ docs/alerts_brief.md wurde nicht erzeugt."
            exit 3
          fi

      - name: Preview docs/alerts_brief.md
        shell: bash
        run: |
          set -euxo pipefail
          echo "===== docs/alerts_brief.md (erste 80) ====="
          head -n 80 docs/alerts_brief.md || true

      # ---- Commit & Push (force im CI) ----
      - name: Commit & Push Brief + JSON
        shell: bash
        run: |
          set -euxo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/alerts.json docs/alerts_brief.md || true
          if git diff --cached --quiet; then
            echo "Keine Änderungen zu committen."
          else
            git commit -m "CI(alerts): update alerts + brief ($(date -u +'%Y-%m-%dT%H:%MZ'))"
            git push origin HEAD:main --force
          fi

      # ---- Telegram Notify (nur wenn Alerts vorhanden) ----
      - name: Telegram Notify
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' && secrets.TELEGRAM_CHAT_ID != '' }}
        shell: bash
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
          RUN_URL:  ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -euxo pipefail
          # kleines Prüfsystem als Temp-Datei
          cat > /tmp/check_and_build_tg.py << 'PY'
import json, pathlib, sys, os
has = False
p = pathlib.Path("docs/alerts.json")
try:
    d = json.loads(p.read_text(encoding="utf-8"))
    for k in ("mars","venus","family"):
        if isinstance(d.get(k), dict) and d[k].get("alerts"):
            if len(d[k]["alerts"]) > 0:
                has = True
                break
except Exception:
    pass
if not has:
    sys.exit(10)
msg = []
msg.append("🚨 Alerts-Run (Mars/Venus)")
msg.append(os.environ.get("RUN_URL",""))
msg.append("")
msg.append("--- Erste Zeilen aus docs/alerts.json ---")
try:
    head = "".join(pathlib.Path("docs/alerts.json").read_text(encoding="utf-8").splitlines(True)[:10])
    msg.append(head)
except Exception:
    msg.append("{}")
pathlib.Path("/tmp/tg_msg.txt").write_text("\n".join(msg), encoding="utf-8")
PY
          if python /tmp/check_and_build_tg.py; then
            curl -sS "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d "chat_id=${TG_CHAT}" \
              --data-urlencode text@/tmp/tg_msg.txt \
              >/dev/null || true
          else
            echo "❕ Keine Alerts vorhanden – Telegram wird übersprungen."
          fi
