name: Alerts & Brief (mars/venus)

on:
  schedule:
    - cron: "6 * * * *"   # stÃ¼ndlich, Minute 06 (UTC)
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: alerts-${{ github.ref }}
  cancel-in-progress: false

jobs:
  alerts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      # ---- Engine (schreibt docs/alerts.json + data/alerts_out.json) ----
      - name: Run alerts engine
        run: |
          mkdir -p docs
          python tools/run_alerts.py
          echo "===== docs/alerts.json (erste 40 Zeilen) ====="
          sed -n '1,40p' docs/alerts.json || true

      # ---- Brief rendern (externes Skript, kein Here-Doc) ----
      - name: Render Markdown Brief
        run: |
          mkdir -p docs
          if [ -f tools/render_alerts_md.py ]; then
            python tools/render_alerts_md.py
          else
            echo "# Alerts Brief â€” $(date -u)" > docs/alerts_brief.md
            echo "_(kein Renderer gefunden â€“ Fallback erstellt)_" >> docs/alerts_brief.md
          fi
          echo "===== docs/alerts_brief.md (erste 80 Zeilen) ====="
          head -n 80 docs/alerts_brief.md || true

      # ---- Commit & Push Brief + JSON (force im CI) ----
      - name: Commit & Push Brief + JSON
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/alerts.json docs/alerts_brief.md || true
          if git diff --cached --quiet; then
            echo "Keine Ã„nderungen zu committen."
          else
            git commit -m "CI(alerts): update alerts + brief ($(date -u +'%Y-%m-%dT%H:%MZ'))"
            git push origin HEAD:main --force
          fi

      # ---- Telegram nur, wenn Alerts vorhanden ----
      - name: Telegram Notify
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
          RUN_URL:  ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          if [ -z "${TG_TOKEN}" ] || [ -z "${TG_CHAT}" ]; then
            echo "Secrets fÃ¼r Telegram nicht gesetzt â€“ Ã¼berspringe."
            exit 0
          fi

          # prÃ¼fen, ob Alerts vorhanden sind
          if grep -q '"alerts": \[' docs/alerts.json; then
            {
              echo "ðŸš¨ Alerts-Run (Mars/Venus) â€“ Details:"
              echo "${RUN_URL}"
              echo ""
              echo "--- Erste Zeilen aus docs/alerts.json ---"
              head -n 10 docs/alerts.json || echo "{}"
            } > /tmp/tg_msg.txt

            curl -sS "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d "chat_id=${TG_CHAT}" \
              --data-urlencode text@/tmp/tg_msg.txt >/dev/null || true
          else
            echo "Keine Alerts â€“ Telegram wird Ã¼bersprungen."
          fi
