name: Mars Push Alerts
on:
  workflow_run:
    workflows: ["Mars CI"]
    types: [completed]
  workflow_dispatch: {}
  schedule:
    - cron: "*/30 * * * *"

permissions:
  contents: write

jobs:
  push:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Send alerts to Telegram (with dedupe)
        env:
          BOT: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          set -e
          PATH_JSON="docs/alerts.json"
          [ -f "$PATH_JSON" ] || { echo "no alerts.json"; exit 0; }
          python - << 'PY'
          import json, time, pathlib, os, urllib.parse, urllib.request
          p_alerts = pathlib.Path("docs/alerts.json")
          data = json.loads(p_alerts.read_text(encoding="utf-8"))
          alerts = data.get("alerts_today") or []
          if not alerts: raise SystemExit(0)
          cache_p = pathlib.Path("docs/notified_cache.json")
          cache = json.loads(cache_p.read_text(encoding="utf-8")) if cache_p.exists() else {}
          now = int(time.time()); horizon = 3*3600
          def can_send(k): return (now - cache.get(k,0)) > horizon
          new=[]
          for a in alerts:
              t=a.get("ticker"); typ=a.get("type"); book=a.get("book","Mars")
              k=f"{t}|{typ}"
              if t and typ and can_send(k):
                  cache[k]=now; new.append(a)
          if not new: raise SystemExit(0)
          lines=[f"{a.get('book','M')[0]} â€¢ {a['ticker']} â€¢ {a['type']} â€¢ {a.get('reason','')}" for a in new]
          text="ðŸš€ Mars Alerts â€¢ " + data.get("as_of","") + "\\n" + "\\n".join(lines)
          BOT=os.environ["BOT"]; CHAT=os.environ["CHAT"]
          url=f"https://api.telegram.org/bot{BOT}/sendMessage"
          body=urllib.parse.urlencode({"chat_id":CHAT,"text":text,"disable_web_page_preview":True}).encode()
          with urllib.request.urlopen(urllib.request.Request(url,data=body), timeout=30) as r: r.read()
          cache_p.write_text(json.dumps(cache, ensure_ascii=False, indent=2), encoding="utf-8")
          PY
      - name: Commit cache
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/notified_cache.json || true
          git commit -m "update notified cache" || echo "no changes"
          git push
